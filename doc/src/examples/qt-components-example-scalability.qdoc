/****************************************************************************
**
** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** No Commercial Usage
** This file contains pre-release code and may not be distributed.
** You may use this file in accordance with the terms and conditions
** contained in the Technology Preview License Agreement accompanying
** this package.
**
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of this
** file.
**
** If you have questions regarding the use of this file, please contact
** Nokia at qt-info@nokia.com.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
\example examples/native/scalability/separatelayouts
\ingroup qt-components-example
\title Scalability: Loading Separate Layouts Based on Screen Configuration
\brief Using separate top level layout files for different resolutions.

The Using Separate Layouts example shows how to use separate top level layout
definitions to support different screen configurations or device form factors
with QML Components.

\image example-scalability-separatelayouts-landscape.jpg

\section1 Selecting The Top-Level Layout According to Resolution and Dots Per Inch (DPI)

The example uses the file MainView.qml as its top-level layout definition.
There are several versions of MainView.qml in a directory structure where the
paths follow the pattern <path>/<resolution>/<DPI>/<fileName>.
The loading of the MainView.qml is handled by the CustomLoader component,
which inherits from \l{Loader}.
The <path> is the root directory of the structure, the
CustomLoader property \c path defines the value of <path>,
in the example the directory is named \c layouts. The part <fileName>
represents the file that should be loaded, the CustomLoader
property \c fileName stores this value, which is set to MainView.qml
in example code.

The <resolution> part of the path can be expressed in two ways.
The most specific way to express <resolution> is to follow the pattern
<max(width,height)>x<min(width,height)>, which uses
properties \c screen.displayWidth and \c screen.displayHeight to parse a
directory name. Note that the larger of the two values is always used
first, the CustomLoader does not support loading different files for
different orientations. The alternative way to define <resolution> is to
use one of the screen size categories Small, Normal, Large, or
ExtraLarge. The CustomLoader defines the screen size categories in the
function \c displayCategory() by using display size category information
provided by \c screen.displayCategory and Screen.

\snippet examples/native/scalability/separatelayouts/CustomLoader.qml Display Categories

The <DPI> part of the path represents the dots per inch value of the display,
the <DPI> can be an integer DPI value or one of the
density categories defined in the CustomLoader function
\c densityCategory(). Similarly to the display size category, the
\c screen.density property and the Screen object provides DPI
information.

\snippet examples/native/scalability/separatelayouts/CustomLoader.qml Density Categories

The path that the CustomLoader is trying to load
is maintained in the property \c mySource. Note that the
CustomLoader rounds the DPI value that it obtains from \c screen.dpi to
the nearest 10 and stores the value in \c roundedDpi.

\snippet examples/native/scalability/separatelayouts/CustomLoader.qml Properties

The actual loading starts when the \c onMySourceChanged signal handler
is triggered as the CustomLoader component is initialized.
The CustomLoader tries first to create an object from the most
specific path. If the path does not exist, then CustomLoader starts to
generalize the path by first replacing screen dimension and DPI information
with corresponding categories, then by dropping DPI information,
and finally the resolution part of the path, see \c onStatusChanged
in the following snippet.

\snippet examples/native/scalability/separatelayouts/CustomLoader.qml Loading

If the CustomLoader would look for the file
MainView.qml with the \c path value set to "layouts" in an
environment with the resolution 800x600 at 103 DPI it would attempt to
create the object from files in the following places.

\list 1
    \o layouts/800x600/100/MainView.qml
    \o layouts/800x600/MainView.qml
    \o layouts/Large/Low/MainView.qml
    \o layouts/Large/MainView.qml
    \o layouts/MainView.qml
\endlist

The purpose of the search pattern is to enable specific layout
definitions, layouts for broader screen categories, and
catch-all layouts.

The CustomLoader will emit the signal
\c loaded if the loading of the specified file succeeds, this
functionality is inherited from \l{Loader}.
If the CustomLoader fails to load the specified file, then it
emits the signal \c loadError. There is an
handler for the \c loadError signal in separatelayouts.qml,
which displays an error message.

\snippet examples/native/scalability/separatelayouts/separatelayouts.qml 0

\section1 Reusing Components in Top Level Layouts

The top level layout files, named MainView.qml, use the component
GradientRectangle. The MainView.qml files define the location of
where the file GradientRectangle.qml resides as Root, and then
simply refer to the corresponding component as Root.GradientRectangle.

\snippet examples/native/scalability/separatelayouts/layouts/MainView.qml 0

\section1 Reacting to Orientation Changes

The algorithm that selects the correct top-level layout does not
take orientation to account. Therefore, the top-level layout file
has to specify if/how orientation is a factor in the layout.

The default layout in the example, layouts/MainView.qml does not react
to orientation changes, but the layout for the category Normal/High has
different states for landscape and portrait. Note the use of AnchorChanges.

\snippet examples/native/scalability/separatelayouts/layouts/Normal/High/MainView.qml 0

\section1 Discussion

It is possible to combine the idea of loading different configuration
files with the selection of different top-level layouts based on screen
size,
see \l{examples/native/scalability/scalableconfiguration}{Scalable Configuration}.
*/

/*!
\example examples/native/scalability/millimeters
\ingroup qt-components-example
\title Scalability: Using Millimeters as Device Independent Measurement Units
\brief Using device independent measurement units.

This example demonstrates how to use device independent measurement units. In this example
we are using millimeters for as an device independet measurement unit.

\image example-scalability-millimeters-portrait.jpg

For more details, see: \l {Device Independent Scalable Measurements}

\section1 Walkthrough

Firstly, we define a helper function for calculating pixels per millimeters from dots
per inch (dpi) of the screen.

\snippet examples/native/scalability/millimeters/ScalableUI.js 0

Then, define font size for the example in millimeters.

\snippet examples/native/scalability/millimeters/ScalableUI.js 1

And same thing for image width.

\snippet examples/native/scalability/millimeters/ScalableUI.js 2

The snippet below scales the \l{Image} element with defined image size.

\snippet examples/native/scalability/millimeters/millimeters.qml 0

Similarly we scale font size of the \l{Text} element.

\snippet examples/native/scalability/millimeters/millimeters.qml 1
*/

/*!

\example examples/native/scalability/anchors
\ingroup qt-components-example
\title Scalability: Using Anchors for Layouting
\brief Using anchors for layouting items.

This example demonstrates how to use anchors for layouting items on orientation
change. Similar logic could also be used for selecting layout for different resolutions.

\image example-scalability-anchors-portrait.jpg

\section1 Walkthrough

Firstly, we have three Box elements anchored to an initial layout.

\snippet examples/native/scalability/anchors/anchors.qml 0

Secondly, we have layouts defined for portrait (\c "portraitLayout" state) and
landscape (\c "landscapeLayout" state). The \c window.inPortrait is bound to the \c when
property of the \c "portraitLayout" state. Similarly \c !window.inPortrait is bound to
the \c when property of the \c "landscapeLayout" state. When orientation condition is met
anchoring of the items is changed accordingly.

\snippet examples/native/scalability/anchors/anchors.qml 1

*/

/*!
\example examples/native/scalability/positioners/column-layout
\ingroup qt-components-example
\title Scalability: Using Column for Layouting
\brief Creating scalable layouts with the Column element.

This example demonstrates how Column element can be used for creating a scalable layout.
In this example number of items shown in the Column changes on orientation change.

\image example-scalability-column-portrait.jpg

\section1 Walkthrough

The number of visible Rectangle elements (\c itemCount) shown in the Column changes
when \c window.inPortrait changes.
In addition, the height (\c rectangleHeight) of a Rectangle item shown in the Column
changes when number of \c itemCount changes.

\snippet examples/native/scalability/positioners/column-layout/column-layout.qml 0

Repeater instantiates four Rectangle elements in the Column.

\snippet examples/native/scalability/positioners/column-layout/column-layout.qml 1

*/

/*!
\example examples/native/scalability/positioners/row-layout
\ingroup qt-components-example
\title Scalability: Using Row for Layouting
\brief Using Row for creating scalable layouts.

This example demonstrates how Row element can be used for creating a scalable layout.
In this example number of items shown in the Row changes on orientation change.

\image example-scalability-row-portrait.jpg

\section1 Walkthrough

The number of visible Rectangle elements (\c itemCount) shown in the Row changes
when \c window.inPortrait changes.
In addition, the width (\c rectangleWidth) of a Rectangle item shown in the Column
changes when number of \c itemCount changes.

\snippet examples/native/scalability/positioners/row-layout/row-layout.qml 0

Repeater instantiates four Rectangle elements in the Row.

\snippet examples/native/scalability/positioners/row-layout/row-layout.qml 1

*/

/*!
\example examples/native/scalability/positioners/grid-layout
\ingroup qt-components-example
\title Using Grid for Layouting
\brief Using Grid element for creating scalable layouts.

This example demonstrates how Grid element can be used for creating a scalable layout.
In this example number of columns and rows of the Grid changes on orientation change.

\image example-scalability-grid-landscape.jpg

\section1 Walkthrough

The width (\c itemWidth) and the height (\c itemHeight) of the GridItem when
number of columns and rows are changed.

\snippet examples/native/scalability/positioners/grid-layout/grid-layout.qml 0

The number of \c columns and \c rows shown in the Grid changes when \c window.inPortrait changes.

\snippet examples/native/scalability/positioners/grid-layout/grid-layout.qml 1

Repeater instantiates six GridItem elements in the Grid.

\snippet examples/native/scalability/positioners/grid-layout/grid-layout.qml 2

*/

/*!
\example examples/native/scalability/scalableconfiguration
\ingroup qt-components-example
\title Scalable Configuration
\brief Loading configuration files based on screen configuration

This example demonstrates how to load different configuration files
that modify UI layout and app logic depending on the DPI and screen
resolution.

The example application implements a simple game, where four different
colored "buttons" flash in random order. The player must push the
buttons in the same sequence that the buttons flash. Each correct
button press yields one point, but pressing the buttons in the wrong
sequence ends the game.

\image example-scalability-scalableconfiguration-landscape.jpg

\section1 Loading Configuration Data According to Resolution and Dots Per Inch (DPI)

This example uses two loaders to initialize the application.
First, the main file scalableconfiguration.qml loads one of
several alternative configuration objects, selecting the
appropriate file to load by the DPI and screen dimensions of
the application runtime. Then the example
loads the GameView object that uses the data in the configuration
object to layout the UI and adjust game settings.

\snippet examples/native/scalability/scalableconfiguration/scalableconfiguration.qml 0

In this setup it is important to first load the configuration object,
and only then create any objects that use data in the configuration
object; any attempt to create an object that relies on non-existent
configuration information will fail.

The loading sequence starts when the application starts and
the CustomLoader element is intialized.
The CustomLoader inherits from \l{Loader}, it is an element that
encapsulates the logic for loading different files for different resolutions.

The configuration objects are implemented by the files named Configuration.qml,
the file name is assigned to CustomLoader property \c fileName in
scalableconfiguration.qml.

The different versions of Configuration.qml exist in a directory structure
where the paths follow the pattern <path>/<resolution>/<DPI>/<fileName>.
The <path> is the root directory of the structure, the
CustomLoader property \c path defines the value of <path>,
in the example the directory is named \c layouts. The part <fileName>
represents the file that should be loaded, the CustomLoader
property \c fileName stores this value, which is set to Configuration.qml
in example code.

The <resolution> part of the path can be expressed in two ways.
The most specific way to express <resolution> is to follow the pattern
<max(width,height)>x<min(width,height)>, which uses
properties \c screen.displayWidth and \c screen.displayHeight to parse a
directory name. Note that the larger of the two values is always used
first, the CustomLoader does not support loading different files for
different orientations. The alternative way to define <resolution> is to
use one of the screen size categories Small, Normal, Large, or
ExtraLarge. The CustomLoader defines the screen size categories in the
function \c displayCategory() by using display size category information
provided by \c screen.displayCategory and Screen.

\snippet examples/native/scalability/scalableconfiguration/CustomLoader.qml Display Categories

The <DPI> part of the path represents the dots per inch value of the display,
the <DPI> can be an integer DPI value or one of the
density categories defined in the CustomLoader function
\c densityCategory(). Similarly to the display size category, the
\c screen.density property and the Screen object provides DPI
information.

\snippet examples/native/scalability/scalableconfiguration/CustomLoader.qml Density Categories

The path that the CustomLoader is trying to load
is maintained in the property \c mySource. Note that the
CustomLoader rounds the DPI value that it obtains from \c screen.dpi to
the nearest 10 and stores the value in \c roundedDpi.

\snippet examples/native/scalability/scalableconfiguration/CustomLoader.qml Properties

The actual loading starts when the \c onMySourceChanged signal handler
is triggered as the CustomLoader component is initialized.
The CustomLoader tries first to create an object from the most
specific path. If the path does not exist, then CustomLoader starts to
generalize the path by first replacing screen dimension and DPI information
with corresponding categories, then by dropping DPI information,
and finally the resolution part of the path, see \c onStatusChanged
in the following snippet.

\snippet examples/native/scalability/scalableconfiguration/CustomLoader.qml Loading


If the CustomLoader would look for the configuration file
Configuration.qml with the \c pathPrefix "configurations" in an
environment with the resolution 800x600 at 103 DPI it would attempt to
create the object from files in the following places.

\list 1
    \o configurations/800x600/100/Configuration.qml
    \o configurations/800x600/Configuration.qml
    \o configurations/Large/Low/Configuration.qml
    \o configurations/Large/Configuration.qml
    \o configurations/Configuration.qml
\endlist

The purpose of the search pattern is to enable specific configurations
definitions, configurations for broader screen categories, and
catch-all configurations.

The CustomLoader will emit the signal
\c loaded if the loading of the specified file succeeds, this
functionality is inherited from \l{Loader}. The signal handler
\c onLoaded is used in scalableconfiguration.qml to initailize
the loading of the GameView element with a regular \l{Loader}.

If the CustomLoader fails to load the specified file, then it
emits the signal \c loadError. There is an
handler for the \c loadError signal in separatelayouts.qml,
which displays an error message.

\section1 Using Data Defined in the Configuration

The data in the Configuration.qml files store information such as
about how many rows and columns of game controls to use, font
specifications, and game speed information. The following snippet is from
the configuration file configurations/640x360/Configuration.qml.

\snippet examples/native/scalability/scalableconfiguration/configurations/640x360/Configuration.qml 0

The GameView element gets the access to the Configuration object from
the assignment \c customLoader.item to its \c configuration property.
In GameView.qml the property is referred to as root.configuration, it
is  used in various locations. The function \c startGame() sets the
interval of a Timer to \c root.configuration.interval.

\snippet examples/native/scalability/scalableconfiguration/GameView.qml startGame

The Timer uses the property \c root.configuration.intervalDecrease to
speed up the game incrementally.

\snippet examples/native/scalability/scalableconfiguration/GameView.qml gameTimer

The GameView element lays out game controls in a Grid, whose column and
row setup is defined in the configuration object.

\snippet examples/native/scalability/scalableconfiguration/GameView.qml grid

The colored "buttons" are defined in GradientRectangle.qml,
\c window.config is used to control the radius of the buttons.

\snippet examples/native/scalability/scalableconfiguration/GameView.qml greenButton

The GameView element has a Text element that displays status
messages in a font defined by the configuration object.

\snippet examples/native/scalability/scalableconfiguration/GameView.qml statusText

\section1 Discussion

It is possible to combine the idea of  selecting different top-level
layouts with the loading of different configuration files based on
screen size, see \l{examples/native/scalability/separatelayouts}{Loading Separate Layouts Based on Screen Configuration}.
*/
