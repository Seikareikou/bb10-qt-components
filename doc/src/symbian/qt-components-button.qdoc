/****************************************************************************
**
** Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the Qt Components project on Qt Labs.
**
** $QT_BEGIN_LICENSE:FDL$
** No Commercial Usage
** This file contains pre-release code and may not be distributed.
** You may use this file in accordance with the terms and conditions
** contained in the Technology Preview License Agreement accompanying
** this package.
**
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of this
** file.
**
** If you have questions regarding the use of this file, please contact
** Nokia at qt-info@nokia.com.
** $QT_END_LICENSE$
**
****************************************************************************/
/*!

    \qmlclass Button
    \ingroup qt-components
    \since 4.7
    \inherits Item

    \brief
    A button component has an icon and a text and can be clicked by the user.

    A button component enables the user to perform a command. The button has a
    rectangular shape and typically there is a text describing its command and
    an icon shown on the button. When the user presses the button, it sends a
    clicked signal.

    You can set a button to be a toggle button by enabling the checkable
    property. A toggle button is a button that can be set to two states, 'on'
    and 'off'. A toggle button is 'on' when its checked property is \c true;
    otherwise the button is 'off'. If the toggle button's state is 'on', its
    background is highlighted, otherwise it looks the same as a button that is
    not a toggle button. The user can click the toggle button to switch it 'on'
    or 'off', for example, to switch between bold and plain style in selected
    text.

    You can also set a button to respond to a long-press. If the button's
    platformAutoRepeat property is \c true, the button sends the clicked signal
    repeatedly as long as the user presses the button. If the button's platformLongPress
    property is \c true, the button sends platformPressAndHold signal once when the user
    presses the button for a long period of time.

    \target Responding to a long-press
    \section1 Responding to a long-press

    \note This use case illustrates Symbian-specific platformAutoRepeat and platformLongPress
    properties as well as platformPressAndHold and platformReleased signals.

    You can define how a button responds to a long-press by using the button's
    \c platformAutoRepeat and \c platformLongPress properties. When the button is pressed, it
    sends:

    \list
    \o a clicked signal as long as the button is pressed if its platformAutoRepeat
    property is \c true.
    \o a platformPressAndHold signal if its platformLongPress property is \c true.
    \endlist

    In this example the user can enable and disable the 'Signals' button's (id:
    btnSignals) platformAutoRepeat property with the \c platformAutoRepeat check box and
    platformLongPress property with the \c platformLongPress check box.

    \snippet src/snippets/symbian/snippet-button.qml 1

    The 'Signals' button's platformAutoRepeat property is bound to the \c platformAutoRepeat
    checkbox's checked property. When the user checks/unchecks the \c platformAutoRepeat
    checkbox, the 'Signals' button's platformAutoRepeat property is set/unset
    respectively. The same pattern applies to the 'Signal' button's platformLongPress
    property and the \c platformLongPress checkbox's checked property.

    The application shows what signals the 'Signals' button sends depending on
    platformAutoRepeat and platformLongPress values and the duration of the pressing. The button
    sends:

    \list
    \o a platformReleased signal every time the user releases the 'Signals' button.
    \o a clicked signal when the user presses and then releases the 'Signals'
    button in a short period of time, regardless of platformAutoRepeat and platformLongPress
    values.
    \o a clicked signal repeatedly as long as the user keeps the 'Signals'
    button pressed if the button's platformAutoRepeat property is \c true. The sending
    starts after a short delay.
    \o a platformPressAndHold signal when the user keeps the 'Signals' button pressed
    if the button's  \c platformLongPress property is \c true.
    \endlist

    \snippet src/snippets/symbian/snippet-button.qml 0

    The screenshot below illustrates the case where the user has set the
    'Signals' button's platformAutoRepeat property to \c true. When the user presses the
    'Signals' button it sends a clicked signal repeatedly as long as the user
    keeps the button pressed. When the user releases the button it
    sends in Symbian environment a platformReleased signal.

    \image symbian/button_platformautorepeat.png

    \section1 Using a button as a toggle button.

    A button can be used as a toggle button when its \c checkable property is
    \c true. The user can switch the toggle button 'on' and 'off' by pressing
    it.

    In this example the user can enable and disable the button's \c checkable
    property with the checkable check box. The 'Signal' button's checkable
    property is bound to \c checkable checkbox's checked property in the same
    way as its platformAutoRepeat and platformLongPress properties in the
    \l {Responding to a long-press} use case.

    The screenshot below illustrates the case where the 'Signals' button is used
    as a toggle button. The user has changed the 'Signals' button to a toggle
    button by checking the checkable check box. Then the user has switched 'on'
    the 'Signals' button by clicking it. When the user presses and then releases
    the button it sends a 'clicked' signal and in Symbian environment also
    a 'platformReleased' signal.

    \image symbian/button_checkable.png

*/
/*!
    \qmlsignal Button::platformReleased()

    \e {Symbian:}

    This signal is emitted when the button is pressed and then released.
*/

/*!
    \qmlsignal Button::platformPressAndHold()

    \e {Symbian:}

    This signal is emitted when the button's \c platformLongPress property is \c true
    and the button is pressed for a long time.

*/

/*!
    \qmlproperty bool Button::platformAutoRepeat

    \e {Symbian:}

    If platformAutoRepeat is \c true, the clicked() signal is emitted repeatedly as long
    as the button is pressed. By default platformAutoRepeat is \c false.

*/

/*!
    \qmlproperty bool Button::platformLongPress


    \e {Symbian:}

    If platformLongPress is \c true, the platformPressAndHold() signal is emitted when the
    button is pressed for a long time. If platformLongPress is \c false, the
    platformPressAndHold() signal is not emitted. By default platformLongPress is \c false.

*/

