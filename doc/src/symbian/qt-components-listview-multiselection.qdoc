/****************************************************************************
**
** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the Qt Components project on Qt Labs.
**
** $QT_BEGIN_LICENSE:FDL$
** No Commercial Usage
** This file contains pre-release code and may not be distributed.
** You may use this file in accordance with the terms and conditions
** contained in the Technology Preview License Agreement accompanying
** this package.
**
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of this
** file.
**
** If you have questions regarding the use of this file, please contact
** Nokia at qt-info@nokia.com.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!

    \page listview-multiselection-symbian.html
    \ingroup qt-components-pattern
    \ingroup qt-components-pattern-symbian
    \title Multi-Select Support for Symbian List Components

    \brief A list with individually selectable items

    You can use a ListView to set up a list with items that can be individually
    selected. The code given below demonstrates how to create a list that looks
    like this:

    \image symbian/listview_multiselection.png

    \section1 Creating the list view

    The following code snippet is a basic definition for a ListView. A ListView
    has a model property which defines the data to be displayed, and a delegate
    property which defines how the data should be displayed on screen.

    \snippet src/snippets/symbian/snippet-listview-multiselection.qml 0


    \section1 Creating the data model

    The following code snippet defines a simple model for a multiselection list.
    It is implemented using a ListModel element and the items of the list
    are ListElements.

    The important thing to note here is that each item in the list \bold must
    include a data item to store the selection state of that item. In this
    example it is called \c selected. The delegate then uses this value to
    display the state visually to the user.

    \snippet src/snippets/symbian/snippet-listview-multiselection.qml 2

    \section1 Creating the ListItem delegate

    The final thing to do is to create the delegate. This defines how the data
    is displayed to the user and also passes information about data changes back
    to the model. Delegates are instantiated as needed by the system and can be
    destroyed at any time (even while scrolling the list) so it is not safe to
    store state information only in the delegate. You must make the delegate
    update the model whenever the state of a item changes. Then your state
    information does not disappear when the delegate item is destroyed.

    The code snippet below defines a delegate with some texts and a checkbox.
    The ListView uses this delegate as a template to display the data for each
    item in the model onto the screen. Note that the onClicked() handler for
    toggling the checkbox is the handler for the whole list item rather than
    just the checkbox. The checkbox is a small target to touch, so a larger
    target is easier for the user. Also, the checkbox overlaps with the list's
    scroll area so it is hard to touch the checkbox without also touching the
    scroll area.

    \snippet src/snippets/symbian/snippet-listview-multiselection.qml 1

*/
