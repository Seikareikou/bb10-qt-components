/****************************************************************************
**
** Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the Qt Components project on Qt Labs.
**
** $QT_BEGIN_LICENSE:FDL$
** No Commercial Usage
** This file contains pre-release code and may not be distributed.
** You may use this file in accordance with the terms and conditions
** contained in the Technology Preview License Agreement accompanying
** this package.
**
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of this
** file.
**
** If you have questions regarding the use of this file, please contact
** Nokia at qt-info@nokia.com.
** $QT_END_LICENSE$
**
****************************************************************************/
/*!
    \qmlclass TextField
    \ingroup qt-components
    \since 4.7
    \brief The TextField component accepts key inputs.

    TextField is resizes to fit all input characters or can be fitted onto a
    fixed size. The line edit can also mask the input characters as when the
    user enters their password.

\snippet src/snippets/MeeGo/snippet-lineedit.qml 0
\snippet src/snippets/MeeGo/snippet-lineedit.qml 99
\snippet src/snippets/MeeGo/snippet-lineedit.qml 2
\snippet src/snippets/MeeGo/snippet-lineedit.qml 98
*/

/*!
    \qmlproperty enumeration TextField::TransformOrigin
    default: enum 4
*/

/*!
    \qmlproperty AnchorLine TextField::baseline
    \qmlproperty AnchorLine TextField::bottom
    \qmlproperty AnchorLine TextField::horizontalCenter
    \qmlproperty AnchorLine TextField::left
    \qmlproperty AnchorLine TextField::right
    \qmlproperty AnchorLine TextField::top
    \qmlproperty AnchorLine TextField::verticalCenter
*/

/*!
    \qmlproperty Anchors* TextField::anchors
*/

/*!
    \qmlproperty Item* TextField::parent
*/

/*!
    \qmlproperty QGraphicsEffect* TextField::effect
*/

/*!
    \qmlproperty QGraphicsObject* TextField::parent
*/

/*!
    \qmlproperty bool TextField::activeFocus
    default: true

    \sa TextField::activeFocusChanged
*/

/*!
    \qmlproperty bool TextField::clip
    default: false

    \sa TextField::clipChanged
*/

/*!
    \qmlproperty bool TextField::enabled
    default: true

    \sa TextField::enabledChanged
*/

/*!
    \qmlproperty bool TextField::focus
    default: focus

    \sa TextField::focusChanged
*/

/*!
    \qmlproperty bool TextField::multiLine
    default: false

    \sa TextField::multiLineChanged
*/

/*!
    \qmlproperty bool TextField::smooth
    default: false

    \sa TextField::smoothChanged
*/

/*!
    \qmlproperty bool TextField::visible
    Setting \c visible to false will turn the whole line edit invisible. The
    line edit will not receive any mouse events.

    \sa TextField::visibleChanged
*/

/*!
    \qmlproperty enumeration TextField::transformOrigin
*/

/*!
    \qmlproperty int TextField::documentMargin
*/

/*!
    \qmlproperty list<QGraphicsObject> TextField::children
*/

/*!
    \qmlproperty list<QGraphicsTransform> TextField::transform
*/

/*!
    \qmlproperty list<QObject> TextField::data
*/

/*!
    \qmlproperty list<QObject> TextField::resources
*/

/*!
    \qmlproperty list<State> TextField::states
*/

/*!
    \qmlproperty list<Transition> TextField::transitions
*/

/*!
    \qmlproperty point TextField::pos
*/

/*!
    \qmlproperty point TextField::transformOriginPoint
*/

/*!
    \qmlproperty point TextField::transformOriginPoint
*/

/*!
    \qmlproperty real TextField::baselineOffset
    default: 0
*/

/*!
    \qmlproperty real TextField::implicitHeight
    default: 20
*/

/*!
    \qmlproperty real TextField::implicitWidth
    default: 64
*/

/*!
    \qmlproperty real TextField::opacity
    default: 1

    \sa TextField::opacityChanged
*/

/*!
    \qmlproperty real TextField::rotation
    default: 0

    \sa TextField::rotationChanged
*/

/*!
    \qmlproperty real TextField::scale
    default: 1

    \sa TextField::scaleChanged
*/

/*!
    \qmlproperty real TextField::width
    \qmlproperty real TextField::height

    Defines the line edit's dimensions in pixel.
    The default width is 200 pixels and the default height is 50 pixels.

    \sa TextField::widthChanged, TextField::heightChanged
*/

/*!
    \qmlproperty real TextField::x
    \qmlproperty real TextField::y

    Defines the TextField's position in pixels, relative to its parent.
    By default, the value of \c x is 0 and \c y is 0.
    \sa TextField::xChanged, TextField::yChanged
*/

/*!
    \qmlproperty real TextField::z

    The \c z property determines the depth of the button in a view. A component
    with a higher \c z value will be drawn in front of components with lower
    \c z values. The default value is \c 0.

    \sa TextField::zChanged
*/

/*!
    \qmlproperty real TextField::radius
    default: 0

    \sa TextField::radiusChanged
*/


/*!
    \qmlproperty rect TextField::childrenRect
*/

/*!
    \qmlproperty string TextField::objectName
*/

/*!
    \qmlproperty string TextField::promptText
*/

/*!
    \qmlproperty string TextField::state
*/

/*!
    \qmlproperty string TextField::styleType
*/

/*!
    \qmlproperty string TextField::text

    The string value of the line edit.

    \sa TextField::textChanged
*/

/*!
    \qmlproperty variant TextField::activeFocusOnPress

    \sa TextField::activeFocusOnPressChanged
*/

/*!
    \qmlproperty variant TextField::color

    \sa TextField::colorChanged
*/

/*!
    \qmlproperty variant TextField::echoMode
    Sets the display format of the inputted characters. For password prompts,
    the password should be masked.

    Specifies how the \c text should be displayed in the TextField.
    \list
    \o TextInput.Normal - Displays the text as it is. (Default)
    \o TextInput.Password - Displays asterixes instead of characters.
    \o TextInput.NoEcho - Displays nothing.
    \o TextInput.PasswordEchoOnEdit - Displays all but the current character
        as asterixes.
    \endlist

\snippet src/snippets/MeeGo/snippet-lineedit.qml 0
\snippet src/snippets/MeeGo/snippet-lineedit.qml 99
\snippet src/snippets/MeeGo/snippet-lineedit.qml 1
\snippet src/snippets/MeeGo/snippet-lineedit.qml 98

    \sa TextInput::echoModeChanged
*/

/*!
    \qmlproperty variant TextField::font
*/

/*!
    \qmlproperty variant TextField::horizontalAlignment
*/

/*!
    \qmlproperty variant TextField::inputElement
*/

/*!
    \qmlproperty string TextField::passwordCharacter

    Set the character used when masking the input. Asterisk, \c *, is the
    default character.

    \sa TextField::echoMode
*/

/*!
    \qmlproperty color TextField::selectedTextColor
    Set the color of selected text.

    \sa TextField::selectedTextColorChanged, TextField::selectionColor
*/

/*!
    \qmlproperty color TextField::selectionColor
    Set the color of the selection area.

    \sa TextField::selectionColorChanged, TextField::selectedTextColor
*/

/*!
    \qmlproperty variant TextField::wrapMode
*/

/*!
    \qmlmethod TextField::_q_reregisterTimers( void* )
    This method is: private
*/

/*!
    \qmlmethod TextField::deleteLater()
    This method is: public
*/

/*!
    \qmlmethod TextField::updateMicroFocus()
    This method is: protected
*/

/*!
    \qmlmethod QDeclarativeItem* TextField::childAt( real x, real y )
    This method is: public
*/

/*!
    \qmlmethod QScriptValue TextField::mapFromItem( QScriptValue item, real x, real y )
    This method is: public
*/

/*!
    \qmlmethod QScriptValue TextField::mapToItem( QScriptValue item, real x, real y )
    This method is: public
*/

/*!
    \qmlmethod void TextField::forceActiveFocus()
    This method is: public
*/

/*!
    \qmlsignal TextField::activeFocusChanged( bool )
    This method is: protected
*/

/*!
    \qmlsignal TextField::activeFocusOnPressChanged()
    This method is: protected
*/

/*!
    \qmlsignal TextField::baselineOffsetChanged( real )
    This method is: protected
*/

/*!
    \qmlsignal TextField::childrenChanged()
    This method is: protected
*/

/*!
    \qmlsignal TextField::childrenRectChanged( rect )
    This method is: protected
*/

/*!
    \qmlsignal TextField::clipChanged( bool )
    This method is: protected
*/

/*!
    \qmlsignal TextField::colorChanged()
    This method is: protected
*/

/*!
    \qmlsignal TextField::destroyed( QObject* )
    This method is: protected
*/

/*!
    \qmlsignal TextField::destroyed()
    This method is: protected
*/

/*!
    \qmlsignal TextField::documentMarginChanged()
    This method is: protected
*/

/*!
    \qmlsignal TextField::echoModeChanged()
    This method is: protected
*/

/*!
    \qmlsignal TextField::enabledChanged()
    This method is: protected
*/

/*!
    \qmlsignal TextField::focusChanged( bool )
    This method is: protected
*/

/*!
    \qmlsignal TextField::fontChanged()
    This method is: protected
*/

/*!
    \qmlsignal TextField::heightChanged()
    This method is: protected
*/

/*!
    \qmlsignal TextField::horizontalAlignmentChanged()
    This method is: protected
*/

/*!
    \qmlsignal TextField::implicitHeightChanged()
    This method is: protected
*/

/*!
    \qmlsignal TextField::implicitWidthChanged()
    This method is: protected
*/

/*!
    \qmlsignal TextField::inputElementChanged()
    This method is: protected
*/

/*!
    \qmlsignal TextField::multiLineChanged()
    This method is: protected
*/

/*!
    \qmlsignal TextField::opacityChanged()
    This method is: protected
*/

/*!
    \qmlsignal TextField::parentChanged( QDeclarativeItem* )
    This method is: protected
*/

/*!
    \qmlsignal TextField::parentChanged()
    This method is: protected
*/

/*!
    \qmlsignal TextField::passwordCharacterChanged()
    This method is: protected
*/

/*!
    \qmlsignal TextField::promptTextChanged()
    This method is: protected
*/

/*!
    \qmlsignal TextField::rotationChanged()
    This method is: protected
*/

/*!
    \qmlsignal TextField::scaleChanged()
    This method is: protected
*/

/*!
    \qmlsignal TextField::selectedTextColorChanged()
    This method is: protected
*/

/*!
    \qmlsignal TextField::selectionColorChanged()
    This method is: protected
*/

/*!
    \qmlsignal TextField::smoothChanged( bool )
    This method is: protected
*/

/*!
    \qmlsignal TextField::stateChanged( string )
    This method is: protected
*/

/*!
    \qmlsignal TextField::styleTypeChanged()
    This method is: protected
*/

/*!
    \qmlsignal TextField::textChanged()
    This method is: protected
*/

/*!
    \qmlsignal TextField::transformOriginChanged( enumeration )
    This method is: protected
*/

/*!
    \qmlsignal TextField::visibleChanged()
    This method is: protected
*/

/*!
    \qmlsignal TextField::widthChanged()
    This method is: protected
*/

/*!
    \qmlsignal TextField::wrapModeChanged()
    This method is: protected
*/

/*!
    \qmlsignal TextField::xChanged()
    \qmlsignal TextField::yChanged()

    Whenever the \c x and \y properties change, these signals are emitted.
    The actions bound to signal handlers \c onXChanged and \c onYChanged are
    executed.

    \sa TextField::x, TextField::y
*/

/*!
    \qmlsignal TextField::zChanged()
    This method is: protected
*/

